# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(ft, inch){
meter <- ft*0.3048 + inch*0.0254
meter
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
# Create a variable `my_name` that contains your name
my_name <- Joon
# Create a variable `my_name` that contains your name
my_name <- "Joon"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
toUpper(now_doing)
# Make the `now_doing` variable upper case
toupper(now_doing)
fav_2 <- fav_2/sqrt(201)
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 3
fav_2 <- 5
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = world_forest_data, aes(x=long, y = lat, group = group, fill = cut(area_change, breaks = c(-30, -20, -10, 0, 10, 20, 30), labels = c("-30~20%", "-20~10%", "-10~0%", "0~10%", "10~20%", "20~30%"))),
na.rm = TRUE,
color = "white",
size = 0.1,
alpha = 0.9
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-60,60), ylim = c(-60, 90)) +
theme_dark()
}
pp <- map_data("caribbean")
View(pp)
library("dplyr")
library("tidyr")
library("ggplot2")
library("mapproj")
library("maps")
options(scipen = 999)
forest_area <- read.csv("data/WBI_Forest_Area_Cleaned.csv", stringsAsFactors = FALSE)
# Filters out useful rows from the csv file
forest_only <- forest_area %>%
filter(Series.Name == "Forest area (sq. km)")
forest_only_percent <- forest_area %>%
filter(Series.Name == "Forest area (% of land area)")
population_only <- forest_area %>%
filter(Series.Name == "Population, total")
co2_emmision <- forest_area %>%
filter(Series.Name == "CO2 emissions (kt)")
# Makes a data frame with required sets spread
organized_data_population <- select(forest_only_percent, Series.Name, Country.Name, YR1992)  %>%
spread(
key = Series.Name,
value = YR1992
)
# Selects necessary columns for analyzing
pop_1992 <- select(population_only, Country.Name, YR1992)
co2_1992 <- select(co2_emmision, Country.Name, YR1992)
co2_1993 <- select(co2_emmision, Country.Name, YR1993)
# Creates a new data frame for my functions to use
new_frame <- left_join(organized_data_population, pop_1992 , by = "Country.Name")
new_frame_with1992 <- left_join(new_frame, co2_1992, by = "Country.Name")
new_frame_with1993 <- left_join(new_frame_with1992, co2_1993, by = "Country.Name")
# Makes a data about population using brown color
get_population_data <- function(the_data_frame){
ggplot(data = new_frame_with1993) +
geom_point(
mapping = aes(x = `Forest area (% of land area)`, y = YR1992.y),
na.rm = TRUE,
color = "brown"
) +
labs(
x = "Forest Area in 1992",
y = "Population"
)
}
# Makes a data about carbon dioxide emission using YR1993 as color disparity factor
get_year_emission_data <- function(the_data_frame){
ggplot(data = new_frame_with1993) +
geom_bin2d(
mapping = aes(x = `Forest area (% of land area)`, y = YR1992.x, color = YR1993),
na.rm = TRUE
) +
labs(
x = "Forest Area in 1992",
y = "CO2 emmision rate",
fill = "Scale with 1993"
)
}
the_world <- map_data("world")
# Turns country names into iso codes
region_names <- the_world$region
Country.Code <- iso.alpha(region_names, n = 3)
the_world <- mutate(the_world, Country.Code = Country.Code)
# Add a new column for analyzing
forest_only_percent <- mutate(
forest_only_percent,
area_change = (YR2016 - YR1992)
)
# Creates a bigger data frame with area_change column
with_countrycode <- select(forest_only_percent, area_change, Country.Code)
world_forest_data <- left_join(with_countrycode, the_world, by = "Country.Code")
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = world_forest_data, aes(x=long, y = lat, group = group, fill = cut(area_change, breaks = c(-30, -20, -10, 0, 10, 20, 30), labels = c("-30~20%", "-20~10%", "-10~0%", "0~10%", "10~20%", "20~30%"))),
na.rm = TRUE,
color = "white",
size = 0.1,
alpha = 0.9
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-60,60), ylim = c(-60, 90)) +
theme_dark()
}
pp <- map_data("caribbean")
View(pp)
library("dplyr")
library("tidyr")
library("ggplot2")
library("mapproj")
library("maps")
options(scipen = 999)
forest_area <- read.csv("data/WBI_Forest_Area_Cleaned.csv", stringsAsFactors = FALSE)
# Filters out useful rows from the csv file
forest_only <- forest_area %>%
filter(Series.Name == "Forest area (sq. km)")
forest_only_percent <- forest_area %>%
filter(Series.Name == "Forest area (% of land area)")
population_only <- forest_area %>%
filter(Series.Name == "Population, total")
co2_emmision <- forest_area %>%
filter(Series.Name == "CO2 emissions (kt)")
# Makes a data frame with required sets spread
organized_data_population <- select(forest_only_percent, Series.Name, Country.Name, YR1992)  %>%
spread(
key = Series.Name,
value = YR1992
)
# Selects necessary columns for analyzing
pop_1992 <- select(population_only, Country.Name, YR1992)
co2_1992 <- select(co2_emmision, Country.Name, YR1992)
co2_1993 <- select(co2_emmision, Country.Name, YR1993)
# Creates a new data frame for my functions to use
new_frame <- left_join(organized_data_population, pop_1992 , by = "Country.Name")
new_frame_with1992 <- left_join(new_frame, co2_1992, by = "Country.Name")
new_frame_with1993 <- left_join(new_frame_with1992, co2_1993, by = "Country.Name")
# Makes a data about population using brown color
get_population_data <- function(the_data_frame){
ggplot(data = new_frame_with1993) +
geom_point(
mapping = aes(x = `Forest area (% of land area)`, y = YR1992.y),
na.rm = TRUE,
color = "brown"
) +
labs(
x = "Forest Area in 1992",
y = "Population"
)
}
# Makes a data about carbon dioxide emission using YR1993 as color disparity factor
get_year_emission_data <- function(the_data_frame){
ggplot(data = new_frame_with1993) +
geom_bin2d(
mapping = aes(x = `Forest area (% of land area)`, y = YR1992.x, color = YR1993),
na.rm = TRUE
) +
labs(
x = "Forest Area in 1992",
y = "CO2 emmision rate",
fill = "Scale with 1993"
)
}
the_world <- map_data("world")
# Turns country names into iso codes
region_names <- the_world$region
Country.Code <- iso.alpha(region_names, n = 3)
the_world <- mutate(the_world, Country.Code = Country.Code)
# Add a new column for analyzing
forest_only_percent <- mutate(
forest_only_percent,
area_change = (YR2016 - YR1992)
)
# Creates a bigger data frame with area_change column
with_countrycode <- select(forest_only_percent, area_change, Country.Code)
world_forest_data <- left_join(with_countrycode, the_world, by = "Country.Code")
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = world_forest_data, aes(x=long, y = lat, group = group, fill = cut(area_change, breaks = c(-30, -20, -10, 0, 10, 20, 30), labels = c("-30~20%", "-20~10%", "-10~0%", "0~10%", "10~20%", "20~30%"))),
na.rm = TRUE,
color = "white",
size = 0.1,
alpha = 0.9
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-60,60), ylim = c(-60, 90)) +
theme_dark()
}
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group),
na.rm = TRUE,
color = "white",
size = 0.1,
alpha = 0.9
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-60,60), ylim = c(-60, 90)) +
theme_dark()
}
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group),
na.rm = TRUE,
color = "white",
size = 0.1,
alpha = 0.9
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-180,180), ylim = c(-90, 90)) +
theme_dark()
}
the_world <- map_data("world")
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group),
na.rm = TRUE,
color = "white",
size = 0.1,
alpha = 0.9
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-180,180), ylim = c(-90, 90))
}
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group),
na.rm = TRUE,
color = "white",
size = 0.1,
alpha = 0.9
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-180,180), ylim = c(-60, 90))
}
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
) +
labs(
fill = "Percent gain/loss"
) +
scale_fill_brewer(
palette = "#1A673F"
) +
coord_map(xlim = c(-180,180), ylim = c(-60, 90))
}
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
)+
coord_map(xlim = c(-180,180), ylim = c(-60, 90))
}
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
)+
coord_map(xlim = c(-180,180), ylim = c(-60, 90))
}
View(forest_map_maker())
library("dplyr")
library("tidyr")
library("ggplot2")
library("mapproj")
library("maps")
options(scipen = 999)
forest_area <- read.csv("data/WBI_Forest_Area_Cleaned.csv", stringsAsFactors = FALSE)
# Filters out useful rows from the csv file
forest_only <- forest_area %>%
filter(Series.Name == "Forest area (sq. km)")
forest_only_percent <- forest_area %>%
filter(Series.Name == "Forest area (% of land area)")
population_only <- forest_area %>%
filter(Series.Name == "Population, total")
co2_emmision <- forest_area %>%
filter(Series.Name == "CO2 emissions (kt)")
# Makes a data frame with required sets spread
organized_data_population <- select(forest_only_percent, Series.Name, Country.Name, YR1992)  %>%
spread(
key = Series.Name,
value = YR1992
)
# Selects necessary columns for analyzing
pop_1992 <- select(population_only, Country.Name, YR1992)
co2_1992 <- select(co2_emmision, Country.Name, YR1992)
co2_1993 <- select(co2_emmision, Country.Name, YR1993)
# Creates a new data frame for my functions to use
new_frame <- left_join(organized_data_population, pop_1992 , by = "Country.Name")
new_frame_with1992 <- left_join(new_frame, co2_1992, by = "Country.Name")
new_frame_with1993 <- left_join(new_frame_with1992, co2_1993, by = "Country.Name")
# Makes a data about population using brown color
get_population_data <- function(the_data_frame){
ggplot(data = new_frame_with1993) +
geom_point(
mapping = aes(x = `Forest area (% of land area)`, y = YR1992.y),
na.rm = TRUE,
color = "brown"
) +
labs(
x = "Forest Area in 1992",
y = "Population"
)
}
# Makes a data about carbon dioxide emission using YR1993 as color disparity factor
get_year_emission_data <- function(the_data_frame){
ggplot(data = new_frame_with1993) +
geom_bin2d(
mapping = aes(x = `Forest area (% of land area)`, y = YR1992.x, color = YR1993),
na.rm = TRUE
) +
labs(
x = "Forest Area in 1992",
y = "CO2 emmision rate",
fill = "Scale with 1993"
)
}
the_world <- map_data("world")
# Turns country names into iso codes
region_names <- the_world$region
Country.Code <- iso.alpha(region_names, n = 3)
the_world <- mutate(the_world, Country.Code = Country.Code)
# Add a new column for analyzing
forest_only_percent <- mutate(
forest_only_percent,
area_change = (YR2016 - YR1992)
)
# Creates a bigger data frame with area_change column
with_countrycode <- select(forest_only_percent, area_change, Country.Code)
world_forest_data <- left_join(with_countrycode, the_world, by = "Country.Code")
# Creates a map based on given data frame
forest_map_maker <- function(){
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
)+
coord_map(xlim = c(-180,180), ylim = c(-60, 90))
}
View(forest_map_maker())
forest_map_maker()
# Creates a map based on given data frame
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
)+
coord_map(xlim = c(-60,180), ylim = c(-60, 90))
# Creates a map based on given data frame
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
)+
coord_map(xlim = c(-60,180), ylim = c(-20, 90))
# Creates a map based on given data frame
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
)+
coord_map(xlim = c(-180,60), ylim = c(-20, 90))
# Creates a map based on given data frame
ggplot() +
geom_polygon(data = the_world, aes(x=long, y = lat, group = group)
)+
coord_map(xlim = c(-180,60), ylim = c(-20, 90)) +
coord_quickmap()
library("shiny")
library("ggplot2")
library("dplyr")
library("tidyr")
ui <- fluidPage(
navbarPage(
"Caribbean Coral Reef Analysis: White Band Disease",
tabsetPanel(type = "tabs",
tabPanel("Introduction", plotOutput("plot")),
tabPanel("Question 1", tableOutput("table")),
tabPanel("Question 2", tableOutput("table")),
tabPanel("Question 3", tableOutput("table")),
tabPanel("Question 4", tableOutput("table"))
)
)
)
server <- server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
navbarPage(
"Caribbean Coral Reef Analysis: White Band Disease",
navbarMenu("Menu",
tabsetPanel(type = "tabs",
tabPanel("Introduction", plotOutput("plot")),
tabPanel("Question 1", tableOutput("table")),
tabPanel("Question 2", tableOutput("table")),
tabPanel("Question 3", tableOutput("table")),
tabPanel("Question 4", tableOutput("table"))
))
)
)
server <- server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/Chang/Desktop/FinalProject/info201-final-project-tns")
mitigation_data <- read.csv("Data/mitigation_experiments.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Chang/Desktop/FinalProject/info201-final-project-tns")
mitigation_data <- read.csv("Data/Mitigation_Experiments/mitigation_experiments.csv", stringsAsFactors = FALSE)
View(mitigation_data)
mitigation_data <- mitigation_data %>%
group_by("Treatment")
mitigation_data <- mitigation_data %>%
group_by("Treatment")
mitigation_data <- mitigation_data %>%
group_by("Site")
mitigation_data <- mitigation_data %>%
group_by("Site")
mitigation_data <- mitigation_data %>%
group_by(Treatment)
mitigation_data <- mitigation_data %>%
group_by(Treatment)
mitigation_data <- read.csv("Data/Mitigation_Experiments/mitigation_experiments_2.csv", stringsAsFactors = FALSE)
mitigation_data <- mitigation_data %>%
group_by(Treatment)
grouped_data <- group_by(mitigation_data, Treatment)
View(grouped_data)
library("dplyr")
mitigation_data <- read.csv("Data/Mitigation_Experiments/mitigation_experiments_2.csv", stringsAsFactors = FALSE)
grouped_data <- group_by(mitigation_data, Treatment)
View(grouped_data)
library("dplyr")
