shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/tedxu/Desktop/info/a8-data-app-vxcent/data")
my_server <- function(input, output) {
output$plot <- renderPlotly({
filtered_years<- year_forest_perc %>%
filter(Year > input$year[1] & Year < input$year[2])%>%
filter(Country == input$country)
p <- ggplot(data = filtered_years)+
geom_col(mapping = aes_string(x = "Year", y = "Forest_Percentage", fill = "Year"))
ggplotly(p)
})
output$table <- DT::renderDataTable(
filtered_years<- year_forest_perc %>%
filter(Year > input$year[1] & Year < input$year[2])%>%
filter(Country == input$country),
options = list(lengthChange = FALSE)
)
}
my_ui <- fluidPage(
titlePanel("Vincent Xu"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "country", label = "Country of Interest", choices = year_forest_perc$Country, selected = "China"),
br(),
sliderInput(inputId = "year", label = "Chosen Year Range", min = year_range[1], max = year_range[2], value = years)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot"),
textOutput("The bar graph showcases selected country forest percentage during selected years. As the slider on the left
side regulates the amount of years and country shown in the graph.")),
tabPanel("Table", DT::dataTableOutput("table"),
textOutput("The chart showcases selected country forest percentage during selected years. As the slider on the left
side regulates the amount of years and country shown in the graph."))
)
)
)
)
runApp()
forest_data <- read.csv("WBI_Forest_Area_Cleaned.csv")
runApp()
source("my_ui.R")
forest_data <- read.csv("WBI_Forest_Area_Cleaned.csv")
my_ui <- fluidPage(
titlePanel("Vincent Xu"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "country", label = "Country of Interest", choices = year_forest_perc$Country, selected = "China"),
br(),
sliderInput(inputId = "year", label = "Chosen Year Range", min = year_range[1], max = year_range[2], value = years)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot"),
textOutput("The bar graph showcases selected country forest percentage during selected years. As the slider on the left
side regulates the amount of years and country shown in the graph.")),
tabPanel("Table", DT::dataTableOutput("table"),
textOutput("The chart showcases selected country forest percentage during selected years. As the slider on the left
side regulates the amount of years and country shown in the graph."))
)
)
)
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp('C:/Users/tedxu/Desktop/info/info201-final-project-tns')
runApp('C:/Users/tedxu/Desktop/info/info201-final-project-tns')
runApp('C:/Users/tedxu/Desktop/info/info201-final-project-tns')
runApp('C:/Users/tedxu/Desktop/info/info201-final-project-tns')
# Call geom_polygon with world map data in order to generate a world map
# Pass in value Division to fill countries with different colors while outlining with thin white lines
# Select color scheme and add labels in the end
# Voila!
ggplot(data = world_locations_modified)+
geom_polygon(aes(x = long, y = lat, group = group, fill = Division), color = "white", size = 0.1)+
coord_quickmap()+
scale_fill_brewer(palette = "Set3")+
labs(title = "World Forest Area Development Over Time", x = "Longitude", y = "latitude")
setwd("C:/Users/tedxu/Desktop/info/a6-collaboration-RamouJ")
mitigation_experiments <- read.csv("shortcut_data/Mitigation_Experiments/mitigation_experiments.csv", stringsAsFactors = FALSE)
mitigation_experiments_df <- head(mitigation_experiments,5)
mitigation_group <- mitigation_experiments %>%
group_by(Site) %>%
summarize(
`Mean TLP` = mean(Tissue_Loss_Progression)
)
colony_condition <- read.csv("shortcut_data/Colony_Condition/colony_condition.csv", stringsAsFactors = FALSE)
colony_condition_df <- head(colony_condition,5)
colony_group <- colony_condition[-c(89), ] %>%
group_by(Site, Type) %>%
summarize(
`Mean Disease` = mean(Disease, na.rm = TRUE),
`Mean Herm` = mean(Herm, na.rm =TRUE),
`Mean Snails` = mean(Snails, na.rm = TRUE)
)
joined_df <- left_join(colony_group, mitigation_group, by = "Site")
joined_df$`Mean TLP`[2] = mitigation_group$`Mean TLP`[2]
joined_df$`Mean TLP`[7] = mitigation_group$`Mean TLP`[7]
View(colony_group)
runApp('C:/Users/tedxu/Desktop/info/info201-final-project-tns')
setwd("C:/Users/tedxu/Desktop/info/info201-final-project-tns")
runApp()
runApp()
runApp()
setwd("C:/Users/tedxu/Desktop/info/info201-final-project-tns")
#The Cofounders Problem
read.csv("info201-final-project-tns\Data\Colony_Condition")
#The Cofounders Problem
read.csv("info201-final-project-tns\DataColony_Condition\Summary_Data")
#The Cofounders Problem
read.csv("info201-final-project-tns\Data\Colony_Condition\Summary_Data")
#The Cofounders Problem
read.csv("info201-final-project-tns\Data\Colony_Condition\Summary_Data.csv")
#The Cofounders Problem
read.csv("info201-final-project-tns/Data/Colony_Condition/Summary_Data.csv")
setwd("C:/Users/tedxu/Desktop/info/info201-final-project-tns")
#The Cofounders Problem
read.csv("/Data/Colony_Condition/Summary_Data.csv")
#The Cofounders Problem
read.csv("Data/Colony_Condition/Summary_Data.csv")
#The Cofounders Problem
summay_data <- read.csv("Data/Colony_Condition/Summary_Data.csv")
View(summary_data)
select(summary_data, Site, General_Disease, Herm, Snails, Total, Percent_Disease)
#The Cofounders Problem
summary_data <- read.csv("Data/Colony_Condition/Summary_Data.csv")
View(summary_data)
summary_data <- select(summary_data, Site, General_Disease, Herm, Snails, Total, Percent_Disease)
summary_data <- select(summary_data, Site, General_Disease, Herm, Snails, Total, Percent_Disease)
View(summary_data)
gather(key = "Diseases", value = "Amount_Diseased", -Site, - Percent_Disease)
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
View()
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)%>%
View()
#The Cofounders Problem
summary_data <- read.csv("Data/Colony_Condition/Summary_Data.csv")
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)%>%
View()
runApp()
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
source("Data/Anlysis.R")
setwd("C:/Users/tedxu/Desktop/info/info201-final-project-tns")
runApp()
runApp()
source("Anlysis.R")
runApp()
View(summary_data)
runApp()
runApp()
runApp()
setwd("C:/Users/tedxu/Desktop/info/info201-final-project-tns")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("question1.R")
filtered_data <- summary_data %>%
filter(Site == input$site) %>%
filter(Diseases == input$Diseases)
runApp()
runApp()
source("question1.R")
View(summary_data)
runApp()
library("ggplot2")
library("dplyr")
library("tidyr")
#The Cofounders Problem
summary_data <- read.csv("Data/Colony_Condition/Summary_Data.csv", stringsAsFactors = FALSE)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
View(summary_data)
runApp()
runApp()
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease) %>%
group_by(Site)
View(summary_data)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease) %>%
group_by(Site)
#The Cofounders Problem
summary_data <- read.csv("Data/Colony_Condition/Summary_Data.csv", stringsAsFactors = FALSE)
View(summary_data)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease) %>%
group_by(Diseases)
View(summary_data)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease) %>%
group_by(Site)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease) %>%
group_by(Site)
View(summary_data)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease) %>%
filter(Site == Wild_Site_A)
View(summary_data)
filter(summary_data, Site == Wild_Site_A)
View(summary_data)
filter(summary_data, Site == "Wild_Site_A")
View(summary_data)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
library("ggplot2")
library("dplyr")
library("tidyr")
#The Cofounders Problem
summary_data <- read.csv("Data/Colony_Condition/Summary_Data.csv", stringsAsFactors = FALSE)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
percentage_range <- range(Percent_Disease)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
percentage_range <- range(Percent_Disease)
percentage_range <- range(summary_data$Percent_Disease)
percentage_range
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
percentage_range
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
percentage_range <- range(summary_data$Percent_Disease)
percentage_range
runApp()
runApp()
View(summary_data)
summary_data <- read.csv("Data/Colony_Condition/Summary_Data.csv", stringsAsFactors = FALSE)
summary_data <- summary_data %>%
select(Site, General_Disease, Herm, Snails, Total, Percent_Disease) %>%
gather(key = "Diseases", value = "Amount_Diseased", -Site, -Percent_Disease)
View(summary_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
